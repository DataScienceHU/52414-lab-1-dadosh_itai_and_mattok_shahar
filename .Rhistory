top.ten[1:2, 1]
top.ten[1:2, 2]
top.ten[1:2,]
top.ten[1:10,]
top.ten[1:10, 1]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == top.ten[1:10, 1]),]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == top.ten[1:10, 1]),]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == "US"),]
top.ten[1:10, 1]
c <-top.ten[1:10, 1]
c <- top.ten[1:10, 1]
top.ten[1:10, 1]
c = top.ten[1:10, 1]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == "US"),]
top.ten[1:10, 1]
top.ten[1:10, 1:2]
top.ten[1:10, 2:4]
top.ten[1:10, 2:3]
top.ten[1:10, 3:4]
top.ten[1:10, ]
top.ten[1:10]
top.ten[1:10, 1]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == top.ten[1:10, 1]),]
merge.for.plot.final <- merge.for.plor2[,c(1, 3, 5, 7)]
merge.for.plot.final <- merge.for.plor2[,c(1, 3, 5, 7)]
merge.for.plot <- merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region")
top.ten[1:10, 1]
merge.for.plot.final <- merge.for.plor2[,c(1, 3, 5, 7)]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == top.ten[1:10, 1]),]
c <- top.ten[1:10, 1]
merge.for.plot.final[which(merge.for.plot.final$Country.Region == c),]
merge.for.plot.final[c]
merge.for.plot.final[c,]
top.ten.vector <- top.ten[1:10, 1]
merge.for.plot.final[top.ten.vector]
merge.for.plot.final[top.ten.vector,]
top.ten
total.merge
merge.for.plot.final[top.ten.vector,]
bars <- merge.for.plot.final[top.ten.vector,]
bars[1]
bars[1:3,]
bars[1:3,2:4]
bars[1:10,2:4]
x<- bars[1:10,2:4]
x
x[1]
top.ten
barplot(height = top.ten[1:10,3], col = c("darkblue","green","red"))
barplot(height = top.ten[1:10,3], col = c("darkblue","green","red"), beside = TRUE)
barplot(height = top.ten[1:10,3], col = c("darkblue","green","red"), beside = FALSE)
barplot(height = top.ten[1:10,3], col = c("darkblue","green","red"), legend = merege.for.plot.final)
barplot(height = top.ten[1], col = c("darkblue","green","red"))
barplot(height = top.ten[1,], col = c("darkblue","green","red"))
barplot(height = top.ten[,1], col = c("darkblue","green","red"))
barplot(height = top.ten[1:10], col = c("darkblue","green","red"))
barplot(height = top.ten[1:10,3], col = c("darkblue","green","red"))
barplot(height = top.ten[,3], col = c("darkblue","green","red"))
barplot(height = top.ten[,3], col = c("darkblue","green","red"))
help("barplot")
help(table)
t <- table(merege.for.plot.final$Confirmed)
t
t <- table(merege.for.plot.final$Confirmed, merege.for.plot.final$Recovered, merege.for.plot.final$Deaths)
t <- table(merege.for.plot.final$Confirmed, merege.for.plot.final$Recovered, merege.for.plot.final$Deaths)
remove(t)
names(bars)[names(bars) == "Value.x"] <- "Confirmed"
bars
bars
e.for.plot.final
names(merge.for.plot.final)[names(merge.for.plot.final) == "Value.x"] <- "Confirmed"
bars <- merge.for.plot.final[top.ten.vector,]
bars
print(bars)
merge.for.plot.final
names(bars)[names(bars) == "Value.x"] <- "Confirmed"
names(bars)[names(bars) == "Value.y"] <- "Recovered"
names(bars)[names(bars) == "Value"] <- "Deaths"
t <- table(bars$Confirmed, bars$Recovered, bars$Deaths)
barplot(height = t, col = c("darkblue","green","red"))
barplot(height = t[1:2, 2:4], col = c("darkblue","green","red"))
barplot(height = t(1:2, 2:4), col = c("darkblue","green","red"))
barplot(height = (t[1:2, 2:4]), col = c("darkblue","green","red"))
barplot(height = (t, 1:2, 2:4), col = c("darkblue","green","red"))
barplot(height = t [1:2 2:4], col = c("darkblue","green","red"))
barplot(height = t[1:2, 2:4], col = c("darkblue","green","red"))
t
barplot(height = t, col = c("darkblue","green","red"))
typeof(t)
t <- table(bars$Confirmed, bars$Recovered, bars$Deaths)
typeof(t)
print(bars)
barplot(height = bars, col = c("darkblue","green","red"))
barplot(height = bars[1:10, 2:4], col = c("darkblue","green","red"))
barplot(bars)
#help("barplot")
barplot(t)
print(bars)
#print(bars)
table1 <- table(bar)
#print(bars)
table1 <- table(bar)
table1 <- table(bar)
table1 <- table(bar)
table1 <- table(bars)
#help("barplot")
barplot(table1)
#merge.for.plot.final
#typeof(t)
#help(table)
remove(table1)
t <- table(bars$Confirmed, bars$Recovered, bars$Deaths)
corona.recovered.narrow
print(corona.recovered.narrow)
tidyverse.sum.confirmed
remove(tidyverse.sum.confirmed)
remove(tidyverse.sum.deaths)
remove(tidyverse.sum.recovered)
remove(top.ten)
top.ten <- head(confirmed.agg.ref.date.sort, 10)
top.ten
recovered.agg.ref.date.sort
recovered.agg.ref.date.sort['US']
recovered.agg.ref.date.sort[,'US']
recovered.agg.ref.date.sort['US',]
top.ten
recovered.agg.ref.date.sort['italy',]
top.ten
recovered.agg.ref.date.sort['Italy',]
top.ten
recovered.agg.ref.date.sort['China',]
top.ten
recovered.agg.ref.date.sort[12942,]
recovered.agg.ref.date.sort[US,]
recovered.agg.ref.date.sort[,US]
recovered.agg.ref.date.sort[US]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == 'US'),]
top.ten[1,]
top.ten[,1]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten[,1]),]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten[,1]),]
top.ten[,1]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten[,1]),]
top.ten[,1]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == 'US'),]
remove(top.ten.vector)
top.ten.vec <- top.ten[,1]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec),]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec), c("Country.Region", "Value")]
recovered.agg.ref.date[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec), c("Country.Region", "Value")]
top.ten.vec
recovered.agg.ref.date[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec), c("Country.Region", "Value")]
merge1 <- aggregate(cbind(Value) ~ Country.Region + Date, data = rbind(recovered.agg.ref.date.sort, confirmed.agg.ref.date.sort), FUN = sum)
recovered.agg.ref.date[which(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region), c("Country.Region", "Value")]
recovered.agg.ref.date[which(recovered.agg.ref.date$Country.Region == top.ten$Country.Region), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == str(top.ten.vec), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region, c("Country.Region", "Value")]
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region, c("Country.Region", "Value")]
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region]
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region)]
c("Country.Region", "Value")
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[unique(recovered.agg.ref.date.sort$Country.Region == top.ten.vec), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(row.names(recovered.agg.ref.date.sort) == top.ten.vec), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(row.names(recovered.agg.ref.date.sort) == row.names(top.ten)), c("Country.Region", "Value")]
recovered.agg.ref.date.sort
toString(top.ten.vec <- top.ten[,1])
recovered.agg.ref.date.sort[which(row.names(recovered.agg.ref.date.sort) == row.names(top.ten)), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(row.names(recovered.agg.ref.date.sort) == c(top.ten)), c("Country.Region", "Value")]
recovered.agg.ref.date.sort[which(row.names(recovered.agg.ref.date.sort) == top.ten), c("Country.Region", "Value")]
top.ten.vec
recovered.agg.ref.date.sort[row.names(recovered.agg.ref.date.sort) == top.ten, c("Country.Region", "Value")]
recovered.agg.ref.date.sort[row.names(recovered.agg.ref.date.sort) == top.ten]
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten]
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten.vec]
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == c(top.ten.vec)]
top.ten.vec <-toString(top.ten[,1])
top.ten.vec
top.ten.vec2 <- paste(top.ten.vec, collapse = ",")
top.ten.vec2
top.ten.vec2 <- paste(top.ten.vec, collapse = " ")
top.ten.vec2
top.ten.vec2 <- paste(top.ten.vec, collapse = "")
top.ten.vec2
remove(top.ten.vec2)
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten.vec]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec)]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten.vec)]
subset(recovered.agg.ref.date.sort, select = top.ten.vec)
subset(recovered.agg.ref.date.sort, select = top.ten.vec)
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec)
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec'US')
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == 'US')
top.ten.vec
remove(top.ten.vec)
top.ten.vec <-toString(top.ten[,1])
top.ten.vec
remove(top.ten.vec)
top.ten.vec <-top.ten[,1]
top.ten.vec
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec)
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec[,])
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec[1,])
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec[,1])
top.ten.vec
str(top.ten.vec)
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec)
top.ten.vec
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == str(top.ten.vec))
str(top.ten.vec)
top.ten.vec
top.ten
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten[1,])
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten[,10])
subset(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == require(top.ten.vec))
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == list(top.ten.vec)]
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region]
top.ten
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region[top.ten$Country.Region]]
recovered.agg.ref.date.sort[which(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region)]
which(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region)
select(recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region)
select(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region)
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region, 1:4]
recovered.agg.ref.date.sort[recovered.agg.ref.date.sort$Country.Region == top.ten$Country.Region, 1:3]
recovered.agg.ref.date.sort
confirmed.agg.ref.date.sort
recovered.agg.ref.date.sort['Italy']
recovered.agg.ref.date.sort[,'Italy']
recovered.agg.ref.date.sort['Italy',]
recovered.agg.ref.date.sort['US',]
recovered.agg.ref.date.sort['France',]
recovered.agg.ref.date.sort
recovered.agg.ref.date.sort <- recovered.agg.ref.date[order(confirmed.agg.ref.date.sort$Country.Region),]
recovered.agg.ref.date.sort
recovered.agg.ref.date.sort <- recovered.agg.ref.date[sort(confirmed.agg.ref.date.sort$Country.Region),]
recovered.agg.ref.date.sort
confirmed.agg.ref.date.sort
recovered.agg.ref.date.sort <- recovered.agg.ref.date %>% filter(Country.Region %in% top.ten.vec)
recovered.agg.ref.date.sort
(top.ten.vec)
deaths.agg.ref.date.sort <- recovered.agg.ref.date %>% filtere(Country.Region %in% top.ten.vec)
deaths.agg.ref.date.sort <- deaths.agg.ref.date %>% filtere(Country.Region %in% top.ten.vec)
deaths.agg.ref.date.sort <- deaths.agg.ref.date %>% filter(Country.Region %in% top.ten.vec)
deaths.agg.ref.date.sort
confirmed.agg.ref.date.sort
recovered.agg.ref.date.sort
order(recovered.agg.ref.date.sort, recovered.agg.ref.date.sort$Country.Region == top.ten.vec)
recovered.agg.ref.date.sort["US"]
merge1 <- aggregate(cbind(Value) ~ Country.Region + Date, data = rbind(recovered.agg.ref.date.sort, confirmed.agg.ref.date.sort), FUN = sum)
merge1
remove(merge1)
aggregate(cbind(Value) ~ Country.Region + Date, data = rbind(recovered.agg.ref.date.sort, confirmed.agg.ref.date.sort))
merge.for.plot <- merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region")
merge.for.plot
remove(merge2)
remove(total.merge)
merge(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region")
merge.for.plot
merge.for.plot <- merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region") %>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
merge.for.plot
merge.for.plot <- merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region")
merge.for.plot
%>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
%>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
merge.for.plot <- merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region") %>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
merge.for.plot
merge.for.plot[order(-merge.for.plot$Value.x),]
merge.for.plot[order(-merge.for.plot$Value.x),][,c(1,3,5)]
merge.for.plot[order(-merge.for.plot$Value.x),][,c(1,3,5,7)]
merge.for.plot.sort <- merge.for.plot[order(-merge.for.plot$Value.x),][,c(1,3,5,7)]
remove(merge.for.plor2)
remove(merge.for.plot.final)
remove(bars)
remove(x)
remove(t)
merge.for.plot.sort
merge.for.plot.sort$Value.x = merge.for.plot.sort$Value.y - merge.for.plot.sort$Value
merge.for.plot.sort
merge.for.plot <-merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region") %>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
merge.for.plot.sort
remove(merge.for.plot.sort)
merge.for.plot <-merge.data.frame(confirmed.agg.ref.date.sort, recovered.agg.ref.date.sort, by = "Country.Region") %>% merge(deaths.agg.ref.date.sort, by = "Country.Region")
(merge.for.plot.sort)
merge.for.plot.sort <- merge.for.plot[order(-merge.for.plot$Value.x),][,c(1,3,5,7)]
(merge.for.plot.sort)
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value,x"] <- "Cases"
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value,y"] <- "Rcover"
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value"] <- "Deaths"
(merge.for.plot.sort)
merge.for.plot.sort
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value,x"] <- "Cases"
merge.for.plot.sort
merge.for.plot.sort
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value,x"] <- "Cases"
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value,y"] <- "Rcover"
names(merge.for.plot.sort)[names(merge.for.plot.sort) == "Value"] <- "Deaths"
merge.for.plot.sort
names(merge.for.plot.sort)[2] <- "Cases"
merge.for.plot.sort
names(merge.for.plot.sort)[3] <- "Rcover"
merge.for.plot.sort
merge.for.plot.sort$Sick <- c(merge.for.plot.sort$Cases - merge.for.plot.sort$Rcover - merge.for.plot.sort$Deaths)
merge.for.plot.sort
merge.for.plot.sort
barplo(merge.for.plot.sort$Cases, col=rgb(1,1,1), legend=rownames(merge.for.plot.sort) )
barplot(merge.for.plot.sort$Cases, col=rgb(1,1,1), legend=rownames(merge.for.plot.sort) )
barplot(merge.for.plot.sort$Cases, legend=rownames(merge.for.plot.sort) )
barplot(merge.for.plot.sort$Cases )
barplot(merge.for.plot.sort$Cases, names.arg = merge.for.plot.sort$Country.Region,  )
barplot(merge.for.plot.sort$Cases, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(merge.for.plot.sort, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
merge.for.plot.sort
barplot(height =  merge.for.plot.sort$Cases,data = merge.for.plot.sort, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height =  merge.for.plot.sort$Cases,beside = T, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height =  merge.for.plot.sort,beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height =  matrix(merge.for.plot.sort), beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height =  table(merge.for.plot.sort), beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height =  (merge.for.plot.sort), beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
t <- table(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
barplot(height =  t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
t <- matrix(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t
remove(t)
t <- table(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
barplot(height =  t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort$Cases, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
t <- table(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
merge.for.plot.sort
t
t <- (merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t <- data.frame(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t
t <- data.frame(merge.for.plot.sort$Country.Region = "Countrt.Region", merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t <- data.frame(merge.for.plot.sort$Country.Region = Countrt.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t <- data.frame(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
t
barplot(height = t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
t
barplot(height = t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = t[1:10, 2:4], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = t[1:10,], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,2:4], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,2], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,2:3], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,3], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,4], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,2:], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[,2:4], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[,2:3], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[,2], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[1:10,2], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort[3,2], beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
t <- table(merge.for.plot.sort$Country.Region, merge.for.plot.sort$Sick, merge.for.plot.sort$Rcover, merge.for.plot.sort$Deaths)
prop.table(t)
barplot(height = t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
remove(t)
hist(height = t, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
hist(height = merge.for.plot.sort, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
barplot(height = merge.for.plot.sort, beside = FALSE, names.arg = merge.for.plot.sort$Country.Region, las = 3 )
remove(t)
merge.for.plot.sort
recovered.agg.ref.date.sort
cases.agg
tail(cases.agg)
install.packages('rmarkdown')
data.cor.confirmed
tidyverse.sum.confirmed
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% sort(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% sort(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
# give coulm's title for each data by define new object
data.cor.confirmed <- corona.confirmed.narrow[c("Country.Region", "Date", "Value")]
data.cor.confirmed$Date = as.Date(data.cor.confirmed$Date)
data.cor.deaths <- corona.deaths.narrow[c("Country.Region", "Date", "Value")]
data.cor.deaths$Date = as.Date(data.cor.deaths$Date)
data.cor.recovered <- corona.recovered.narrow[c("Country.Region", "Date", "Value")]
data.cor.recovered$Date = as.Date(data.cor.recovered$Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
tidyverse.sum.confirmed
# tidyverse option
data.cor.confirmed
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
library(tidyverse)
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
tidyverse.sum.deaths <- data.cor.deaths %>% group_by(Country.Region, Date) %>% summarise(Value = sum()) %>% arrange(Date)
tidyverse.sum.recovered <- data.cor.recovered %>% group_by(Country.Region, Date) %>% summarise(Value = sum()) %>% arrange(Date)
tidyverse.sum.confirmed == data.cor.confirmed
identical(tidyverse.sum.confirmed, data.cor.confirmed)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% sort(Date)
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% sort(order(Date))
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
identical(tidyverse.sum.confirmed, data.cor.confirmed)
tidyverse.sum.confirmed
data.cor.confirmed
identical(tidyverse.sum.confirmed, cases.agg)
cases.agg
tidyverse.sum.confirmed
cases.agg
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
tidyverse.sum.confirmed
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region) %>% summarise(value = sum(Value))
tidyverse.sum.confirmed
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value))
# tidyverse option
tidyverse.sum.confirmed <- data.cor.confirmed %>% group_by(Country.Region, Date) %>% summarise(value = sum(Value)) %>% arrange(Date)
tidyverse.sum.confirmed
identical(tidyverse.sum.confirmed, cases.agg)
cases.agg
tidyverse.sum.confirmed
cases.agg
head(join.eco.corona)
head(join.eco.corona)
# Q4 - b
# Join together the data tables 'corona' and 'eco_data'
join.eco.corona <-inner_join(corona, eco_data.wide.select, by = "country")
# Q4 - b
# Join together the data tables 'corona' and 'eco_data'
join.eco.corona <-inner_join(corona, eco_data.wide.select, by = "country")
# Join together the 3 data tables of Cases, Recovered and Deaths.
corona <- cases.agg %>% inner_join(recovered.agg, by = c("Country.Region", "Date")) %>% inner_join(deaths.agg, by = c("Country.Region", "Date"))
corona <- corona %>% rename(c("country" = Country.Region ,"Cases" = Value.x ,"Recovered" = Value.y,"Deaths" = Value)) # rename columns, 'Country.Region' changed for the next question
# Q4 - b
# Join together the data tables 'corona' and 'eco_data'
join.eco.corona <-inner_join(corona, eco_data.wide.select, by = "country")
# select the columns required
eco_data.wide.select <-eco_data.wide %>% select(1, 2, 8, 9, 11)
eco_data.wide <- reshape(eco_data.slice, idvar = "country", timevar = "feature", direction = "wide") # caonvert to wide format
#loading the `eco_data`:
eco_data <- read.csv(url("https://raw.githubusercontent.com/DataScienceHU/DataAnalysisR_2020/master/data/economic_data.csv"))
#loading the `eco_data`:
eco_data <- read.csv(url("https://raw.githubusercontent.com/DataScienceHU/DataAnalysisR_2020/master/data/economic_data.csv"))
names(eco_data)[1:6] <- c("country","S_country","feature","feature_code","Y2018V","Y2019V")
# Q3 - b
eco_data = head(eco_data, -5) # delete the last 5 rows, empty rows.
eco_data.slice <- eco_data[,c(1,3,5)] # new data fram just with require coulums
eco_data.wide <- reshape(eco_data.slice, idvar = "country", timevar = "feature", direction = "wide") # caonvert to wide format
head(eco_data.wide)
# select the columns required
eco_data.wide.select <-eco_data.wide %>% select(1, 2, 8, 9, 11)
#rename the columns name
names(eco_data.wide.select) = c("country", "GDP", "pop_total_columns", "pop_city_ratio", "pop65")
# Q3 - d
# Add new column that represent the GDP per capita,
eco_data.GDP.capita <- eco_data.wide.select %>% mutate(GDP_Capite = as.numeric(GDP) / as.numeric(pop_total_columns), pop_per = as.numeric(pop65) / as.numeric(pop_total_columns))
eco_data.GDP.capita %>% head(5)
eco_data.GDP.capita.ordered <- eco_data.GDP.capita[order(-eco_data.GDP.capita$GDP_Capite),]
eco_data.GDP.capita.ordered.d <- eco_data.GDP.capita.ordered %>% filter(GDP_Capite > quantile(GDP_Capite, 0.1))
plot(log(as.numeric(eco_data.GDP.capita.ordered.d$GDP_Capite)), as.numeric(eco_data.GDP.capita.ordered.d$pop_per), xlab = "GDP per capota", ylab = "Ageg above 65, %", col = "darkblue")
# Join together the 3 data tables of Cases, Recovered and Deaths.
corona <- cases.agg %>% inner_join(recovered.agg, by = c("Country.Region", "Date")) %>% inner_join(deaths.agg, by = c("Country.Region", "Date"))
corona <- corona %>% rename(c("country" = Country.Region ,"Cases" = Value.x ,"Recovered" = Value.y,"Deaths" = Value)) # rename columns, 'Country.Region' changed for the next question
# Q4 - b
# Join together the data tables 'corona' and 'eco_data'
join.eco.corona <-inner_join(corona, eco_data.wide.select, by = "country")
head(join.eco.corona)
# Q4 - c
#  New columns of normalized cases, deaths, and recovered that show the number of cases per 100,000 people for each country.
join.eco.corona <-join.eco.corona %>% mutate(N.cases = Cases / 100000, N.deaths = Deaths / 100000, N.recovered = Recovered / 100000)
cases.agg.q4 <- aggregate(N.cases ~ country + Date, data = join.eco.corona, FUN = sum)
deaths.agg.q4 <- aggregate(N.deaths ~ country + Date, data = join.eco.corona, FUN = sum)
recovered.agg.q4 <- aggregate(N.recovered ~ country + Date, data = join.eco.corona, FUN =  sum)
confirmed.agg.ref.date.q4 <- cases.agg.q4[which(cases.agg.q4$Date==ref.date),]
confirmed.agg.ref.date.sort.q4 <- confirmed.agg.ref.date.q4[order(-confirmed.agg.ref.date.q4$N.cases),]
top.ten.q4 <- head(confirmed.agg.ref.date.sort.q4, 10) # Top ten countries in Corona cases
top.ten.vec.q4 <-top.ten.q4[,1]
recovered.agg.ref.date.q4 <- recovered.agg.q4[which(recovered.agg.q4$Date==ref.date),]
recovered.agg.ref.date.sort.q4 <- recovered.agg.ref.date.q4 %>% filter(country %in% top.ten.vec.q4)
deaths.agg.ref.date.q4 <- deaths.agg.q4[which(deaths.agg.q4$Date==ref.date),]
deaths.agg.ref.date.sort.q4 <- deaths.agg.ref.date.q4 %>% filter(country %in% top.ten.vec.q4)
# merge the 3 data tables
merge.for.plot.q4 <-merge.data.frame(confirmed.agg.ref.date.sort.q4, recovered.agg.ref.date.sort.q4, by = "country") %>% merge(deaths.agg.ref.date.sort.q4, by = "country")
# sorting and renames the colums for each coulums the data table it come from
merge.for.plot.sort.q4 <- merge.for.plot.q4[order(-merge.for.plot.q4$N.cases),][,c(1,3,5,7)]
names(merge.for.plot.sort.q4)[2] <- "Cases"
names(merge.for.plot.sort.q4)[3] <- "Rcover"
names(merge.for.plot.sort.q4)[4] <- "Deaths"
# Calculate the Sick people, Sick = Cases - deaths - recover
merge.for.plot.sort.q4$Sick <- c(merge.for.plot.sort.q4$Cases - merge.for.plot.sort.q4$Rcover - merge.for.plot.sort.q4$Deaths)
# Manipulate on the data frame for plot output
merge.for.plot.sort.t.q4 = t(merge.for.plot.sort.q4)
colnames(merge.for.plot.sort.t.q4) <- as.character(unlist(merge.for.plot.sort.t.q4[1,]))
merge.for.plot.sort.t.q4 = merge.for.plot.sort.t.q4[-1,]
# Barplot
barplot(merge.for.plot.sort.t.q4[c(4,3,2),], las = 2, legend.text = T, ylim =  c(0, 1), xlab = "Countries", ylab = "Cases", col = c("green", "red", "blue"), main = "Top Ten Countries with the most cases", cex.axis = 0.7, cex.names = 0.6)
# Q4 - d
join.eco.corona.upper.15 <- join.eco.corona %>% filter(as.numeric(pop65)  > 15)
## The question is: If the is a correlatio between amout of Cases (blue) or Deaths (red) and the GDP per capita
join.eco.corona.q5 <- join.eco.corona %>% filter(Date == "2020-03-31")
join.eco.corona.q5 <- join.eco.corona.q5 %>% mutate(GDP_CAP = as.numeric(GDP) / as.numeric(pop_total_columns))
